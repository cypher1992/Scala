[debug] 
[debug] Initial source changes: 
[debug] 	removed:Set(C:\Users\Zero\IdeaProjects\Scala\src\main\scala\com\local\basics\Tuple.scala, C:\Users\Zero\IdeaProjects\Scala\src\main\scala\com\local\basics\HelloWorld.scala)
[debug] 	added: Set(C:\Users\Zero\IdeaProjects\Learning\Scala\src\main\scala\com\local\AlgoWithDataStructure\Data_Structure\BinaryTreeMod\Branch.scala, C:\Users\Zero\IdeaProjects\Learning\Scala\src\main\scala\com\local\AlgoWithDataStructure\Data_Structure\BinaryTreeMod\Tree.scala, C:\Users\Zero\IdeaProjects\Learning\Scala\src\main\scala\com\local\AlgoWithDataStructure\Data_Structure\BinaryTreeMod\Leaf.scala, C:\Users\Zero\IdeaProjects\Learning\Scala\src\main\scala\com\local\AlgoWithDataStructure\Data_Structure\traitstructures\BinaryTree.scala)
[debug] 	modified: Set(C:\Users\Zero\IdeaProjects\Learning\Scala\src\main\scala\com\local\AlgoWithDataStructure\Data_Structure\HashTableMutableStructure.scala)
[debug] Invalidated products: Set()
[debug] External API changes: API Changes: Set()
[debug] Modified binary dependencies: Set()
[debug] Initial directly invalidated classes: Set(com.local.AlgoWithDataStructure.Data_Structure.HashTableMutableStructure)
[debug] 
[debug] Sources indirectly invalidated by:
[debug] 	product: Set()
[debug] 	binary dep: Set()
[debug] 	external source: Set()
[debug] All initially invalidated classes: Set(com.local.AlgoWithDataStructure.Data_Structure.HashTableMutableStructure)
[debug] All initially invalidated sources:Set(C:\Users\Zero\IdeaProjects\Learning\Scala\src\main\scala\com\local\AlgoWithDataStructure\Data_Structure\BinaryTreeMod\Branch.scala, C:\Users\Zero\IdeaProjects\Learning\Scala\src\main\scala\com\local\AlgoWithDataStructure\Data_Structure\BinaryTreeMod\Tree.scala, C:\Users\Zero\IdeaProjects\Learning\Scala\src\main\scala\com\local\AlgoWithDataStructure\Data_Structure\HashTableMutableStructure.scala, C:\Users\Zero\IdeaProjects\Learning\Scala\src\main\scala\com\local\AlgoWithDataStructure\Data_Structure\BinaryTreeMod\Leaf.scala, C:\Users\Zero\IdeaProjects\Learning\Scala\src\main\scala\com\local\AlgoWithDataStructure\Data_Structure\traitstructures\BinaryTree.scala)
[info] Compiling 5 Scala sources to C:\Users\Zero\IdeaProjects\Learning\Scala\target\scala-2.13\classes ...
[debug] Getting org.scala-sbt:compiler-bridge_2.13:1.2.5:compile for Scala 2.13.0
[debug] Getting org.scala-sbt:compiler-bridge_2.13:1.2.5:compile for Scala 2.13.0
[debug] [zinc] Running cached compiler 38893e3c for Scala compiler version 2.13.0
[debug] [zinc] The Scala compiler is invoked with:
[debug] 	-bootclasspath
[debug] 	C:\Program Files\Java\jdk1.8.0_211\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_211\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_211\jre\lib\sunrsasign.jar;C:\Program Files\Java\jdk1.8.0_211\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_211\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_211\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_211\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_211\jre\classes;C:\Users\Zero\.ivy2\cache\org.scala-lang\scala-library\jars\scala-library-2.13.0.jar
[debug] 	-classpath
[debug] 	C:\Users\Zero\IdeaProjects\Learning\Scala\target\scala-2.13\classes;C:\Users\Zero\.ivy2\cache\com.typesafe.scala-logging\scala-logging_2.13\bundles\scala-logging_2.13-3.9.2.jar;C:\Users\Zero\.ivy2\cache\org.scala-lang\scala-reflect\jars\scala-reflect-2.13.0.jar;C:\Users\Zero\.ivy2\cache\org.slf4j\slf4j-api\jars\slf4j-api-1.7.26.jar;C:\Users\Zero\.ivy2\cache\ch.qos.logback\logback-classic\jars\logback-classic-1.1.7.jar;C:\Users\Zero\.ivy2\cache\ch.qos.logback\logback-core\jars\logback-core-1.1.7.jar;C:\Users\Zero\.ivy2\cache\joda-time\joda-time\jars\joda-time-2.10.4.jar;C:\Users\Zero\.ivy2\cache\org.joda\joda-convert\jars\joda-convert-2.2.1.jar;C:\Users\Zero\.ivy2\cache\io.github.mainstringargs\alpha-vantage-scraper\jars\alpha-vantage-scraper-1.1.jar;C:\Users\Zero\.ivy2\cache\io.github.mainstringargs\stock-data-spi\jars\stock-data-spi-1.1.jar;C:\Users\Zero\.ivy2\cache\org.slf4j\slf4j-log4j12\jars\slf4j-log4j12-1.7.25.jar;C:\Users\Zero\.ivy2\cache\log4j\log4j\bundles\log4j-1.2.17.jar;C:\Users\Zero\.ivy2\cache\com.google.code.gson\gson\jars\gson-2.8.2.jar;C:\Users\Zero\.ivy2\cache\com.google.code.findbugs\jsr305\jars\jsr305-3.0.2.jar
[debug] Scala compilation took 11.208246251 s
[info] Done compiling.
[debug] Invalidating (transitively) by inheritance from com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Leaf...
[debug] Initial set of included nodes: Set(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Leaf)
[debug] Invalidated by transitive inheritance dependency: Set(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Leaf)
[debug] The following modified names cause invalidation of com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Tree: Set(UsedName(Leaf,[Default]))
[debug] Change NamesChange(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Leaf,ModifiedNames(changes = UsedName($isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notifyAll,[Default]), UsedName(Leaf,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productIterator,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(productArity,[Default]), UsedName(hashCode,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(canEqual,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]))) invalidates 2 classes due to The com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Leaf has the following regular definitions changed:
[debug] 	UsedName($isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notifyAll,[Default]), UsedName(Leaf,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productIterator,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(productElementNames,[Default]), UsedName(productArity,[Default]), UsedName(hashCode,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(toString,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(canEqual,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]).
[debug] 	> by transitive inheritance: Set(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Leaf)
[debug] 	> 
[debug] 	> by member reference: Set(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Tree)
[debug]         
[debug] Invalidating (transitively) by inheritance from com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Branch...
[debug] Initial set of included nodes: Set(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Branch)
[debug] Invalidated by transitive inheritance dependency: Set(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Branch)
[debug] The following modified names cause invalidation of com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Tree: Set(UsedName(Branch,[Default]))
[debug] Change NamesChange(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Branch,ModifiedNames(changes = UsedName($isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(copy,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notifyAll,[Default]), UsedName(right,[Default]), UsedName(left,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(Branch,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productIterator,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(com;local;AlgoWithDataStructure;Data_Structure;BinaryTreeMod;Branch;init;,[Default]), UsedName(copy$default$3,[Default]), UsedName(productElementNames,[Default]), UsedName(copy$default$2,[Default]), UsedName(productArity,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(value,[Default]), UsedName(toString,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(canEqual,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]))) invalidates 2 classes due to The com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Branch has the following regular definitions changed:
[debug] 	UsedName($isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(copy,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(productElementName,[Default]), UsedName(notifyAll,[Default]), UsedName(right,[Default]), UsedName(left,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(Branch,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName(productIterator,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(com;local;AlgoWithDataStructure;Data_Structure;BinaryTreeMod;Branch;init;,[Default]), UsedName(copy$default$3,[Default]), UsedName(productElementNames,[Default]), UsedName(copy$default$2,[Default]), UsedName(productArity,[Default]), UsedName(hashCode,[Default]), UsedName(copy$default$1,[Default]), UsedName(productElement,[Default]), UsedName(productPrefix,[Default]), UsedName(value,[Default]), UsedName(toString,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(canEqual,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]).
[debug] 	> by transitive inheritance: Set(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Branch)
[debug] 	> 
[debug] 	> by member reference: Set(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Tree)
[debug]         
[debug] Invalidating (transitively) by inheritance from com.local.AlgoWithDataStructure.Data_Structure.traitstructures.BinaryTree...
[debug] Initial set of included nodes: Set(com.local.AlgoWithDataStructure.Data_Structure.traitstructures.BinaryTree)
[debug] Including com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Branch by com.local.AlgoWithDataStructure.Data_Structure.traitstructures.BinaryTree
[debug] Including com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Leaf by com.local.AlgoWithDataStructure.Data_Structure.traitstructures.BinaryTree
[debug] Invalidated by transitive inheritance dependency: Set(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Branch, com.local.AlgoWithDataStructure.Data_Structure.traitstructures.BinaryTree, com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Leaf)
[debug] The following modified names cause invalidation of com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Tree: Set(UsedName(BinaryTree,[Default]))
[debug] The following modified names cause invalidation of com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Branch: Set(UsedName($isInstanceOf,[Default]), UsedName(BinaryTree,[Default]), UsedName(asInstanceOf,[Default]), UsedName(eq,[Default]), UsedName(==,[Default]))
[debug] The following modified names cause invalidation of com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Tree: Set(UsedName(BinaryTree,[Default]))
[debug] The following modified names cause invalidation of com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Leaf: Set(UsedName($isInstanceOf,[Default]), UsedName(BinaryTree,[Default]))
[debug] The following modified names cause invalidation of com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Tree: Set(UsedName(BinaryTree,[Default]))
[debug] Change NamesChange(com.local.AlgoWithDataStructure.Data_Structure.traitstructures.BinaryTree,ModifiedNames(changes = UsedName($isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(BinaryTree,[Default]), UsedName(isInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(asInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]))) invalidates 4 classes due to The com.local.AlgoWithDataStructure.Data_Structure.traitstructures.BinaryTree has the following regular definitions changed:
[debug] 	UsedName($isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(BinaryTree,[Default]), UsedName(isInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(asInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]).
[debug] 	> by transitive inheritance: Set(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Branch, com.local.AlgoWithDataStructure.Data_Structure.traitstructures.BinaryTree, com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Leaf)
[debug] 	> 
[debug] 	> by member reference: Set(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Tree, com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Branch, com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Leaf)
[debug]         
[debug] Invalidating (transitively) by inheritance from com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Tree...
[debug] Initial set of included nodes: Set(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Tree)
[debug] Invalidated by transitive inheritance dependency: Set(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Tree)
[debug] Change NamesChange(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Tree,ModifiedNames(changes = UsedName($isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(init_Tree,[Default]), UsedName(##,[Default]), UsedName(com;local;AlgoWithDataStructure;Data_Structure;BinaryTreeMod;Tree;init;,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(size,[Default]), UsedName(asInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(depth,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(Tree,[Default]))) invalidates 1 classes due to The com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Tree has the following regular definitions changed:
[debug] 	UsedName($isInstanceOf,[Default]), UsedName(!=,[Default]), UsedName(getClass,[Default]), UsedName(wait,[Default]), UsedName(isInstanceOf,[Default]), UsedName(notifyAll,[Default]), UsedName(synchronized,[Default]), UsedName(init_Tree,[Default]), UsedName(##,[Default]), UsedName(com;local;AlgoWithDataStructure;Data_Structure;BinaryTreeMod;Tree;init;,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(size,[Default]), UsedName(asInstanceOf,[Default]), UsedName(equals,[Default]), UsedName($asInstanceOf,[Default]), UsedName(depth,[Default]), UsedName(hashCode,[Default]), UsedName(toString,[Default]), UsedName(finalize,[Default]), UsedName(eq,[Default]), UsedName(notify,[Default]), UsedName(==,[Default]), UsedName(Tree,[Default]).
[debug] 	> by transitive inheritance: Set(com.local.AlgoWithDataStructure.Data_Structure.BinaryTreeMod.Tree)
[debug] 	> 
[debug] 	> 
[debug]         
[debug] New invalidations:
[debug] 	Set()
[debug] Initial set of included nodes: Set()
[debug] Previously invalidated, but (transitively) depend on new invalidations:
[debug] 	Set()
[debug] All newly invalidated classes after taking into account (previously) recompiled classes:Set()
